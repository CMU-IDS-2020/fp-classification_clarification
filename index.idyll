[meta title:"Final Project" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"A Beginners Guide To Machine Learning"
  subtitle:"A friendly, interactive guide to teach you about classification"
  author:"Laura Howard, Christian Deverall, Nathan Jen, Juliette Wong"
  authorLink:"https://idyll-lang.org"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
/]

[var name:"introStep" value:0 /]
[Scroller currentStep: introStep]

  [Graphic className:"d3-component-container"]
    [img src:"static/images/machineLearning.png" /]
  [/Graphic]
  [Step]
    # A Brief History of Classification
  [/Step]

  [Step]
    ## Can computers learn from data?

    This question led to the development of machine learning.  In 1959, Arthur Samuel (a pioneer computer scientist) 
    defined machine learning as “the field of study that [b] gives computers the ability to learn without being explicitly programmed[/b]”.
  [/Step]

  [Step]
    While this may sound complex, we hope to make some machine learning concepts approachable and easy to learn 
    through examples and activities in this article.

    Think of it this way – as you can learn these concepts through experimenting with examples, computers can do the same!
  [/Step]

  [Step]
    To grasp how machine learning works, we need to understand [b]algorithms - the method for creating models from data[/b].  
    In this article, we will show you algorithms that perform classification tasks on a famous machine learning dataset.  
    Classification in today’s world is responsible for advancements in speech recognition, face detection, handwriting 
    recognition, and even email spam identification.
  [/Step]
[/Scroller]

[var name:"caseStudyStep" value:0 /]
[Scroller currentStep: caseStudyStep]

  [Graphic className:"d3-component-container"]
    [Conditional if:`caseStudyStep === 0`]
      [img src:"static/images/iris.png" /]
    [/Conditional]
    [Conditional if:`caseStudyStep === 2`]
      [img src:"static/images/knn.png" /]
    [/Conditional]
    [Conditional if:`caseStudyStep === 3`]
      [img src:"static/images/dt.png" /]
    [/Conditional]
    [Conditional if:`caseStudyStep === 4`]
      [img src:"static/images/lr.png" /]
    [/Conditional]
  [/Graphic]

  [Step]
    # Case Study  

    You are Edgar Anderson, a world-renowned botanist.  Your favorite flower is the iris, and to understand this enigmatic 
    flower, you recorded measurements of 50 samples of 3 species of iris flowers, totaling 150 instances.  Your measurements 
    consist of the length and width of the sepals and petals (note that sepals are leafs that protect petals when they are budding, 
    and act as the support for the petals once bloomed).  You want to see if you can use pattern recognition to predict the iris 
    species based on your measurements.
  [/Step]

  [Step]
    To complete this task, you will use three commonly used classification algorithms:  

      1. K Nearest Number (KNN)   

      2. Decision Trees  

      3. Logistic Regression.
  [/Step]

  [Step]
    ## K Nearest Number (KNN)

    The K Nearest Number (KNN) algorithm classifies data based on data that is most similar.  
    You will use this algorithm to guess the iris species based on similar known data.  
  [/Step]

  [Step]
    ## Decision Trees

    The Decision Tree algorithm splits data according to certain parameters. One can think 
    of this as having a flow-chart like structure, where each data point goes through the tree 
    and is subsequently labeled based on the attributes of the data point.  
  [/Step]

  [Step]
    ## Logistic Regression  

    Logistic Regression is a classification algorithm that first finds a linear regression 
    based on the attributes of the data, and then passes that regression output to a sigmoid 
    function to convert it to a probability of whether or not the data point is of a certain class.
  [/Step]
[/Scroller]

[var name:"introStep" value:0 /]
[Scroller currentStep: introStep]

  [Graphic className:"d3-component-container"]
    [img src:"static/images/overfitting.png" /]
  [/Graphic]

  [Step]
    # Warning: Overfitting  

    One thing to pay attention to when using algorithms is overfitting.  
    Overfitting happens when a model is too complex and starts to classify according 
    to a random error in the data over the expected relationships between variables.  
    A model is considered “overfit” when it fits your training data really well, yet performs 
    poorly on new data. One way to identify an “overfit” is to reserve a portion of your data 
    set and introduce it after you are finished creating your model to see how it performs.
  [/Step]
[/Scroller]

[data name:"iris" source:"iris.csv" /]
[Table data:iris /]

// [var name:"state2" value:0 /]

// [Scroller currentStep:state2]

//   [Graphic className:"d3-component-container"]
//     [CustomD3Component className:"d3-component" state:`state2+1` /]
//   [/Graphic]

//   [Step]

//     ## Markup

//     Idyll is based on Markdown.

//     You can use familiar syntax
//     to create **bold** (`**bold**` ) and *italic* (`*italic*` ) styles,

// * lists
// * of
// * items,

//     ```
//     * lists
//     * of
//     * items,
//     ```

// 1. and numbered
// 2. lists
// 3. of items,


//     ```
//     1. and numbered
//     2. lists
//     3. of items,
//     ```

//     in addition to [hyperlinks](https://idyll-lang.org) and images:

//     ![quill](static/images/quill.svg)

//     ```
//     ![quill](static/images/quill.svg)
//     ```
//   [/Step]

//   [Step]
//     ## Components

//     Components can be embedded using a bracket syntax:

//     ```
//     [Range /]
//     ```

//     and can contain nested content:

//     ```
//     [Equation]e = mc^{2}[/Equation]
//     ```

//     Components accept properties:

//     ```
//     [Range value:x min:0 max:1 /]
//     ```

//     that can be bound to variables to achieve interactivity (more in next section).


//     A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

//     To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.

//   [/Step]

//   [Step]
//     ## Interactivity

//     Here is how you can instantiate a variable and bind it to a component:

//     [var name:"exampleVar" value:5 /]

//     [Range min:0 max:10 value:exampleVar /]
//     [Display value:exampleVar /]

//     ```
//     [var name:"exampleVar" value:5 /]

//     [Range min:0 max:10 value:exampleVar /]
//     [Display value:exampleVar /]
//     ```
//   [/Step]

// [/Scroller]

// [Scroller]

//   [Step]

//     ##Scroller

//     The `Scroller` component is used to create scroll-based presentations. It can be used to create scrollytelling articles similar to this.
//     It takes a property `currentStep` which is updated when the user scrolls to a different step.

//     A persistent graphic may also provided using the `Graphic` component in order to create visualizations.

//   [/Step]

//   [Step]

//     ## Learn More

//     To learn more see the documentation at [https://idyll-lang.org/docs/](https://idyll-lang.org/docs/),
//     join our [chatroom](https://gitter.im/idyll-lang/Lobby), or see the project on [GitHub](https://github.com/idyll-lang/idyll).
//   [hr /]

//   [/Step]

// [/Scroller]

// [br/]
// # Technical Details

// ## Installation

// - Make sure you have `idyll` installed (`npm i -g idyll`).
// - Clone this repo and run `npm install`.

// ## Developing a post locally

// Run `idyll`.

// ## Building a post for production

// Run `idyll build`. The output will appear in the top-level `build` folder. To change the output location, change the `output` option in `package.json`.

// ## Deploying

// Make sure your post has been built, then deploy the docs folder via any static hosting service.

// ## Dependencies

// You can install custom dependencies by running `npm install <package-name> --save`. Note that any collaborators will also need download the package locally by running `npm install` after pulling the changes.
